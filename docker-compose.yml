services:
  # Healthchecks Backend
  healthchecks:
    image: lscr.io/linuxserver/healthchecks:latest
    container_name: healthchecks
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - SITE_ROOT=${SITE_ROOT}
      - SITE_NAME=${SITE_NAME}
      - SUPERUSER_EMAIL=${SUPERUSER_EMAIL}
      - SUPERUSER_PASSWORD=${SUPERUSER_PASSWORD}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - ALLOWED_HOSTS=*
      - APPRISE_ENABLED=False #optional
      - CSRF_TRUSTED_ORIGINS= #optional
      - DEBUG=True #optional
      - INTEGRATIONS_ALLOW_PRIVATE_IPS= #optional
      - PING_EMAIL_DOMAIN= #optional
      - RP_ID= #optional
      - SECRET_KEY= #optional
      - SITE_LOGO_URL= #optional
      - REGISTRATION_OPEN=False
      - DEBUG=${DEBUG}
    volumes:
      - healthchecks_data:/config
    ports:
      - 8000:8000
      - 2525:2525 #optional
    restart: unless-stopped
  # Healthchecks Frontend
  healthchecks-front:
    build:
      context: .
      dockerfile: ./.docker/Dockerfile
    container_name: healthchecks-front
    environment:
      - NEXT_PUBLIC_APIKEY=${NEXT_PUBLIC_APIKEY}
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
    ports:
      - "3000:3000"
  # Caddy Proxy
  caddy:
    image: caddy:latest
    container_name: healthchecks-caddy
    ports:
      - "8087:80"
    volumes:
      - ./.docker/Caddyfile:/etc/caddy/Caddyfile:ro
    depends_on:
      - healthchecks
      - healthchecks-front
    restart: unless-stopped

volumes:
  healthchecks_data:
    driver: local